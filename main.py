import telebot
from telebot import types
import functions as func
import big_data as bd
import keyboard as kb
from config import TOKEN, admin
import logging
import time

bot = telebot.TeleBot(TOKEN)
bot_username = bot.get_me().username

markdown = """
    *bold text*
    _italic text_
    [text](URL)
    """

logging.basicConfig(level=logging.INFO, filename="log.log",
                    format="%(asctime)s %(levelname)s %(message)s", filemode="w", encoding = "UTF-8")

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

@bot.message_handler(commands=['start'])
def get_text_message(message):
    user_first_name = message.from_user.first_name
    chat_id = message.chat.id
    username = message.from_user.username
    print('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ', user_first_name, username, message.from_user.id)
    func.first_join(user_id=chat_id, username=username)
    bot.send_message(message.from_user.id, 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–≠—Ç–æ –±–æ—Ç Drop.\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?', parse_mode= "Markdown", reply_markup=kb.menu)
    logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username}, {user_first_name}.")


# –í—ã–∑–æ–≤ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª–∏
@bot.message_handler(commands=['admin'])
def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    print(username, ' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É admin')
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É admin: {username}, {user_id}.")
    if message.chat.id == admin:
        print(username, '–ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ')
        logging.info(f"–ü–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ: {username}, {user_id}.")
        bot.send_message(message.chat.id, ' {}, –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!'.format(message.from_user.first_name),
                         reply_markup=kb.admin)


@bot.message_handler(content_types=['text'])
def main(message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_name = message.from_user.username
    if message.text == '–í–æ–ø—Ä–æ—Å –ø–æ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—é':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å', reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    elif message.text == '–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É':
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif message.text == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
        bot.send_message(message.chat.id, bd.safe, parse_mode= "Markdown", reply_markup=kb.menu)
    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É", parse_mode= "Markdown", reply_markup=kb.contacts)
        bot.register_next_step_handler(msg, contacts)
    elif message.text == '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ':
        bot.send_message(message.chat.id, bd.partner, parse_mode= "Markdown", reply_markup=kb.menu)
    elif message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        logging.info(f"–û—à–∏–±–∫–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤ –≥–ª.–º–µ–Ω—é {user_name}, {user_first_name}.")
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!", reply_markup=kb.menu)







def make_order(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        msg = bot.send_message(message.chat.id, text = bd.see_deliv, parse_mode= "Markdown", reply_markup=kb.make_order)
        bot.register_next_step_handler(msg, make_order)
    elif message.text == '–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏':
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", parse_mode= "Markdown", reply_markup=kb.info_deliv)
        bot.register_next_step_handler(msg, info_deliv)
    elif message.text == '–°–∞–π—Ç':
        bot.send_message(message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", parse_mode= "Markdown", reply_markup=kb.make_order)
    elif message.text == '–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É':
        msg = bot.send_message(message.chat.id, text=bd.consult_prod, parse_mode= "Markdown", reply_markup=kb.make_order)
        bot.register_next_step_handler(msg, make_order)
    elif text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        logging.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (–∞–≤—Ç–æ) {user_name}, {user_first_name}.")


def info_deliv(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–§":
        msg = bot.send_message(message.chat.id, text = bd.deliv_rf, parse_mode= "Markdown", reply_markup=kb.make_order)
        bot.register_next_step_handler(msg, make_order)
    elif text == '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞':
        msg = bot.send_message(message.chat.id, text = bd.deliv_world, parse_mode= "Markdown", reply_markup=kb.make_order)
        bot.register_next_step_handler(msg, make_order)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.make_order)
        bot.register_next_step_handler(msg, make_order)
    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!", reply_markup=kb.make_order)

def deliv_q(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', parse_mode= "Markdown", reply_markup=kb.deliv_quesch_make)
        bot.register_next_step_handler(msg, deliv_quesch_make)
    elif text == '–û–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑, –∞ –Ω–∞ –ø–æ—á—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è ¬´–Ω–µ –æ–ø–ª–∞—á–µ–Ω¬ª':
        msg = bot.send_message(message.chat.id, text = bd.payd_order, parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif text == '–ì–¥–µ –º–æ–π –∑–∞–∫–∞–∑?':
        msg = bot.send_message(message.chat.id, bd.how_see_del, parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif text == '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–æ–π –∑–∞–∫–∞–∑? –ö–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω?':
        msg = bot.send_message(message.chat.id, text = bd.do_y_give_mon, parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif text == '–ó–∞–∫–∞–∑ –Ω—É–∂–µ–Ω —Å—Ä–æ—á–Ω–æ':
        msg = bot.send_message(message.chat.id, text = bd.fast_deliv, parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif text == '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º':
        msg = bot.send_message(message.chat.id, text = bd.problem_order, parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif text == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        msg = bot.send_message(message.chat.id, text = bd.samovyvoz, parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif text == '–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–∞–π—Ç–µ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º':
        msg = bot.send_message(message.chat.id, text = bd.problem, parse_mode= "Markdown", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!", reply_markup=kb.make_order)



def deliv_quesch_make(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        msg = bot.send_message(message.chat.id, text = bd.how_see_del, parse_mode= "Markdown", reply_markup=kb.deliv_quesch_make)
        bot.register_next_step_handler(msg, deliv_quesch_make)
    elif text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏':
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", parse_mode= "Markdown", reply_markup=kb.info_deliv)
        bot.register_next_step_handler(msg, info_deliv_quesch)
    elif text == '–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É':
        msg = bot.send_message(message.chat.id, text=bd.consult_prod, parse_mode= "Markdown", reply_markup=kb.deliv_quesch_make)
        bot.register_next_step_handler(msg, deliv_quesch_make)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.deliv_quesch)
        bot.register_next_step_handler(msg, deliv_q)
    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!", reply_markup=kb.deliv_quesch)

def info_deliv_quesch(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–§":
        msg = bot.send_message(message.chat.id, text = bd.deliv_rf, parse_mode= "Markdown", reply_markup=kb.info_deliv)
        bot.register_next_step_handler(msg, info_deliv_quesch)
    elif text == '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞':
        msg = bot.send_message(message.chat.id, text = bd.deliv_world, parse_mode= "Markdown", reply_markup=kb.info_deliv)
        bot.register_next_step_handler(msg, info_deliv_quesch)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.deliv_quesch_make)
        bot.register_next_step_handler(msg, deliv_quesch_make)
    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!", reply_markup=kb.deliv_quesch_make)


def color_q(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∞–¥–∞ –∫—Ä–∞—Å–∏—Ç–µ–ª–µ–π":
        msg = bot.send_message(message.chat.id, text = bd.table_drop, reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    elif text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', parse_mode= "Markdown", reply_markup=kb.instructions)
        bot.register_next_step_handler(msg, instructions_color_q)
    elif text == '–ö–∞–∫ –æ–∫—Ä–∞—à–∏–≤–∞—Ç—å?':
        msg = bot.send_message(message.chat.id, bd.how_color, parse_mode= "Markdown", reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    elif text == '–ö–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–π –≤–µ—â—å—é?':
        msg = bot.send_message(message.chat.id, bd.how2_color, parse_mode= "Markdown", reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    elif text == '–ú–æ–∂–Ω–æ —Å–º–µ—à–∏–≤–∞—Ç—å —Ü–≤–µ—Ç–∞?':
        msg = bot.send_message(message.chat.id, bd.mix_color, parse_mode= "Markdown", reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    elif text == '–ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç–∏–ª—å –º–æ–∂–Ω–æ –æ–∫—Ä–∞—à–∏–≤–∞—Ç—å?':
        msg = bot.send_message(message.chat.id, bd.textil_color, parse_mode= "Markdown", reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    elif text == '–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω?':
        msg = bot.send_message(message.chat.id, bd.activator_color, parse_mode= "Markdown", reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!", reply_markup=kb.color_q)

def instructions_color_q(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', parse_mode= "Markdown", reply_markup=kb.instr)
        bot.register_next_step_handler(msg, instr)
    elif message.text == '–ú–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å—ã':
        msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –º–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", parse_mode= "Markdown", reply_markup=kb.masterclass_main)
        bot.register_next_step_handler(msg, masterclass_main)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.color_q)
        bot.register_next_step_handler(msg, color_q)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')

def instr(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ç–∞–π-–¥–∞–π":
        msg = bot.send_message(message.chat.id, bd.instr_tai_dai, parse_mode= "Markdown", reply_markup=kb.instr)
        bot.register_next_step_handler(msg, instr)
    elif message.text == '–û–¥–Ω–æ—Ç–æ–Ω–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è', parse_mode= "Markdown", reply_markup=kb.instr_mono_color)
        bot.register_next_step_handler(msg, instr_mono_color)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.instructions)
        bot.register_next_step_handler(msg, instructions_color_q)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')

def instr_mono_color(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–ö—Ä–∞—Å–∏—Ç–µ–ª—è–º–∏ –¥–ª—è —Ç–∞–π-–¥–∞–π":
        msg = bot.send_message(message.chat.id, bd.instr_mono_tai_dai, parse_mode= "Markdown", reply_markup=kb.instr_mono_color)
        bot.register_next_step_handler(msg, instr_mono_color)
    elif message.text == '–ü—Ä—è–º—ã–º–∏ –∫—Ä–∞—Å–∏—Ç–µ–ª—è–º–∏':
        msg = bot.send_message(message.chat.id, bd.instr_mono_straight, parse_mode= "Markdown", reply_markup=kb.instr_mono_color)
        bot.register_next_step_handler(msg, instr_mono_color)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.instr)
        bot.register_next_step_handler(msg, instr)
    else:
        msg = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!', reply_markup=kb.instr_mono_color)
        bot.register_next_step_handler(msg, instr_mono_color)

def masterclass_main(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö":
        msg = bot.send_message(message.chat.id, bd.master_main, parse_mode= "Markdown", reply_markup=kb.masterclass_main)
        bot.register_next_step_handler(msg, masterclass_main)
    elif message.text == '–¢–µ—Ö–Ω–∏–∫–∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è':
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É', parse_mode= "Markdown", reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.instructions)
        bot.register_next_step_handler(msg, instructions_color_q)
    else:
        msg = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!', reply_markup=kb.masterclass_main)
        bot.register_next_step_handler(msg, masterclass_main)


def masterclass_technics(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∂–∏–¥–∫–∏–º–∏ –∫—Ä–∞—Å–∏—Ç–µ–ª—è–º–∏":
        msg = bot.send_message(message.chat.id, bd.master_liq, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif message.text == '–ü–æ–≥—Ä—É–∂–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞':
        msg = bot.send_message(message.chat.id, bd.master_diving, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif message.text == '–õ–µ–¥—è–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞':
        msg = bot.send_message(message.chat.id, bd.master_ice, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif message.text == '–ñ–µ–æ–¥–∞':
        msg = bot.send_message(message.chat.id, bd.master_zheoda, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif message.text == '–ì—Ä–∞–¥–∏–µ–Ω—Ç':
        msg = bot.send_message(message.chat.id, bd.master_grad, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif message.text == '–®–∏–±–æ—Ä–∏':
        msg = bot.send_message(message.chat.id, bd.master_shib, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif message.text == '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –ø–µ–Ω–æ–π':
        msg = bot.send_message(message.chat.id, bd.master_foam, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif message.text == '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∫–∏–ø—è—Ç–∫–æ–º':
        msg = bot.send_message(message.chat.id, bd.master_boiled, reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.masterclass_main)
        bot.register_next_step_handler(msg, masterclass_main)
    else:
        msg = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!', reply_markup=kb.masterclass_technics)
        bot.register_next_step_handler(msg, masterclass_technics)


def contacts(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å DROP":
        msg = bot.send_message(message.chat.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", parse_mode= "Markdown", reply_markup=kb.call_drop)
        bot.register_next_step_handler(msg, call_drop)
    elif message.text == '–ì–¥–µ –∫—É–ø–∏—Ç—å':
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞", parse_mode= "Markdown", reply_markup=kb.buy_choice)
        bot.register_next_step_handler(msg, buy_choice)
    elif text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')


def call_drop(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ":
        msg = bot.send_message(message.chat.id, bd.contacts_sotr, parse_mode= "Markdown", reply_markup=kb.call_drop)
        bot.register_next_step_handler(msg, call_drop)
    elif message.text == '–í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã':
        msg = bot.send_message(message.chat.id, bd.contacts_all, parse_mode= "Markdown", reply_markup=kb.call_drop)
        bot.register_next_step_handler(msg, call_drop)
    elif message.text == '–°–∞–π—Ç':
        msg = bot.send_message(message.chat.id, bd.contacts_site, parse_mode= "Markdown", reply_markup=kb.call_drop)
        bot.register_next_step_handler(msg, call_drop)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.contacts)
        bot.register_next_step_handler(msg, contacts)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')

def buy_choice(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "–û–Ω–ª–∞–π–Ω":
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", parse_mode= "Markdown", reply_markup=kb.buy_d)
        bot.register_next_step_handler(msg, buy)
    elif message.text == '–û—Ñ–ª–∞–π–Ω':
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é", parse_mode= "Markdown", reply_markup=kb.buy_offline_choice)
        bot.register_next_step_handler(msg, buy_offline_choice)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.contacts)
        bot.register_next_step_handler(msg, contacts)
    else:
        msg = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        bot.register_next_step_handler(msg, buy_choice)


def buy(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if message.text == '–û–∑–æ–Ω':
        msg = bot.send_message(message.chat.id, bd.buy_ozon, parse_mode= "Markdown", reply_markup=kb.buy_d)
        bot.register_next_step_handler(msg, buy)
    elif message.text == '–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑':
        msg = bot.send_message(message.chat.id, bd.buy_wb, parse_mode= "Markdown", reply_markup=kb.buy_d)
        bot.register_next_step_handler(msg, buy)
    elif message.text == '–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç':
        msg = bot.send_message(message.chat.id, bd.buy_yand, parse_mode= "Markdown", reply_markup=kb.buy_d)
        bot.register_next_step_handler(msg, buy)
    elif message.text == '–°–∞–π—Ç':
        msg = bot.send_message(message.chat.id, bd.buy_site, parse_mode= "Markdown", reply_markup=kb.buy_d)
        bot.register_next_step_handler(msg, buy)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.buy_choice)
        bot.register_next_step_handler(msg, buy_choice)
    else:
        msg = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        bot.register_next_step_handler(msg, buy_choice)


def buy_offline_choice(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if message.text == '–†–§':
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", parse_mode= "Markdown", reply_markup=kb.buy_offline_city)
        bot.register_next_step_handler(msg, buy_offline_city)
    elif message.text == '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã':
        msg = bot.send_message(message.chat.id, bd.buy_off_ot_country, parse_mode= "Markdown", reply_markup=kb.buy_d)
        bot.register_next_step_handler(msg, buy)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.buy_choice)
        bot.register_next_step_handler(msg, buy_choice)
    else:
        msg = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        bot.register_next_step_handler(msg, buy_offline_choice)


def buy_offline_city(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if message.text == '–ú–æ—Å–∫–≤–∞':
        msg = bot.send_message(message.chat.id, bd.buy_off_moscow, parse_mode= "Markdown", reply_markup=kb.buy_offline_city)
        bot.register_next_step_handler(msg, buy_offline_city)
    elif message.text == '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
        msg = bot.send_message(message.chat.id, bd.buy_off_spb, parse_mode= "Markdown", reply_markup=kb.buy_offline_city)
        bot.register_next_step_handler(msg, buy_offline_city)
    elif message.text == '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥':
        msg = bot.send_message(message.chat.id, bd.buy_off_nn, parse_mode= "Markdown", reply_markup=kb.buy_offline_city)
        bot.register_next_step_handler(msg, buy_offline_city)
    elif message.text == '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
        msg = bot.send_message(message.chat.id, bd.buy_off_mos_area, parse_mode= "Markdown", reply_markup=kb.buy_offline_city)
        bot.register_next_step_handler(msg, buy_offline_city)
    elif message.text == '–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞':
        msg = bot.send_message(message.chat.id, bd.buy_off_other, parse_mode= "Markdown", reply_markup=kb.buy_offline_city)
        bot.register_next_step_handler(msg, buy_offline_city)
    elif text == '–ù–∞–∑–∞–¥':
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.buy_choice)
        bot.register_next_step_handler(msg, buy_choice)
    else:
        msg = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!', reply_markup=kb.buy_offline_city)
        bot.register_next_step_handler(msg, buy_offline_city)



#–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)
@bot.callback_query_handler(func=lambda call: True)   
def handler_call(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id
    if call.data == 'statistics':
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=func.stats(), reply_markup=kb.admin)
    elif call.data == 'admin_msg':
            chat_id = call.message.chat.id
            text = call.message.text
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. \n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –ù–∞–∑–∞–¥!', reply_markup=kb.back)
            bot.register_next_step_handler(msg, message1)
    elif call.data == 'logging': 
        bot.send_document(chat_id=chat_id, document=open('log.log', 'rb'))
    elif call.data == 'subd':
        bot.send_document(chat_id=chat_id, document=open('db.db', 'rb'))

def message1(message):
    text = message.text
    if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        info = func.admin_message(text)
        bot.send_message(message.chat.id, text=' –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
        for i in range(len(info)):
            try:
                time.sleep(1)
                bot.send_message(info[i][0], str(text))
            except:
                pass
        bot.send_message(message.chat.id, text=' –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')


# –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
bot.polling(none_stop=True)
bot.infinity_polling()